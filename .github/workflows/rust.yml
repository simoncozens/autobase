name: Rust

on:
  - push
  - pull_request

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        name: Set up Rust for caching
      - name: Build
        run: cargo build
      - name: Lint for formatting
        run: cargo fmt --all -- --check
      - name: Lint for warnings
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Run tests
        run: |
          cargo test
  deploy-binaries:
    name: Build and upload binaries
    permissions:
      contents: write
      id-token: write
    runs-on: ${{ matrix.os.os }}
    # Only build on main or tag
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    strategy:
      fail-fast: false
      matrix:
        os:
          - build: linux
            os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu

          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin

          - build: macos-m1
            os: macos-latest
            target: aarch64-apple-darwin

          - build: windows-gnu
            os: windows-latest
            target: x86_64-pc-windows-gnu

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.os.target }}
          cache-key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}
      - name: Build
        run: cargo build --verbose --release --target ${{ matrix.os.target }}
      - name: Decide on our version name (tag or "dev")
        id: version
        shell: bash
        run: |
          if [ -n "$GITHUB_REF" ]; then
              if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
                  echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
              else
                  echo "VERSION=dev" >> $GITHUB_ENV
              fi
          else
              echo "VERSION=dev" >> $GITHUB_ENV
          fi
      - name: Build archive
        shell: bash
        run: |
          # dirname="autobase-${{ env.VERSION }}-${{ matrix.os.target }}-py${{ matrix.python }}"
          dirname="autobase-${{ env.VERSION }}-${{ matrix.os.target }}"
          mkdir "$dirname"
          if [ "${{ matrix.os.os }}" = "windows-latest" ]; then
              mv "target/${{ matrix.os.target }}/release/"*.exe "$dirname"
              7z a "$dirname.zip" "$dirname"
              echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          else
              mv "target/${{ matrix.os.target }}/release/autobase" "$dirname"
              tar -czf "$dirname.tar.gz" "$dirname"
              echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET }}
          path: ${{ env.ASSET }}
      - if: contains(github.ref, 'refs/tags/v')
        name: Add artefact to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload autobase-${{ env.VERSION }} ${{ env.ASSET }}
